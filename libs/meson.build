# SPDX-License-Identifier: BSD-3-Clause

# Configuration data for the `xylene_config.hh` header
config = configuration_data()
config.set('AUTOGEN_HEADER', '/* THIS FILE IS AUTOGENERATED, DO NOT EDIT */')
## Version Information
config.set('COMPILER_NAME', cxx.get_id())
config.set('COMPILER_VERSION', cxx.version())
## Platform information
config.set('TARGET_SYS', target_machine.system())
config.set('TARGET_ARCH', target_machine.cpu())

config.set('BUILD_SYS', build_machine.system())
config.set('BUILD_ARCH', build_machine.cpu())
## Misc
config.set('BUGREPORT_URL', get_option('bugreport_url'))

git = find_program('git', required: false, native: true)
if git.found()
	git_hash = run_command(git, 'rev-parse', '--short', 'HEAD').stdout().strip()
	if run_command(git, 'diff', '--quiet').returncode() != 0
		git_hash += '-dirty'
	endif
	config.set('GIT_HASH', git_hash)
	describe = run_command(git, 'describe', '--tag')
	if describe.returncode() == 0
		config.set('VERSION_NUMBER', describe.stdout().strip())
	else
		config.set('VERSION_NUMBER', '@0@-@1@'.format(meson.project_version(), git_hash))
	endif
else
	config.set('VERSION_NUMBER', meson.project_version())
endif

config_header = configure_file(
	configuration: config,
	input: 'xylene_config.hh.in',
	output: 'xylene_config.hh'
)

install_headers(
	[ config_header ],
	subdir: 'xylene'
)

root_inc = include_directories('.')

# Add the libraries themselves

subdir('libxylene-common')
subdir('libxylene-bitstream')
subdir('libxylene-database')
subdir('libxylene')
